PARSER_BEGIN(MiniJava)import java.io.*;public class MiniJava {  public static void main(String args[]) throws ParseException, IOException {    MiniJava parser = new MiniJava(new FileInputStream(args[0]));    parser.Goal();  }}                          // 建立一個新的parser，執行開頭state:  Goal()PARSER_END(MiniJava)SKIP : /* WHITE SPACE */{  " "| "\t"| "\n"| "\r"| "\f"}                          // 標記左述指令SPECIAL_TOKEN : /* COMMENTS */{  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">}                           // 忽略特殊指令TOKEN : {  < LPAREN: "(" >| < RPAREN: ")" >| < LSQPAREN: "[" >| < RSQPAREN: "]" >| < LBRACE: "{" >| < RBRACE: "}" >| < SEMICOLON: ";" >| < DOT: "." >| < ASSIGN: "=" >| < LT: "<" >| < PLUS: "+" >| < MINUS: "-" >| < AND : "&&" >   | < NOT : "!" >   | < BOOLEAN: "boolean" >   | < CLASS: "class" >| < INTERFACE: "interface" >| < ELSE: "else" >| < EXTENDS: "extends" >| < FALSE: "false" >| < IF: "if" >| < WHILE: "while" >| < INTEGER: "int" >   | < LENGTH: "length" >| < MAIN: "main" >| < NEW: "new" >| < PUBLIC: "public" >| < RETURN: "return" >| < STATIC: "static" >| < STRING: "String" >| < THIS: "this" >| < TRUE: "true" >| < PRINT: "System.out.println" >| < VOID: "void" >         }                           // 定義所有會出現的指令TOKEN : /* LITERALS */{  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >}                           // 定義數字TOKEN : /* IDENTIFIERS */{  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >|  < #LETTER:      [       "\u0024",       "\u0041"-"\u005a",       "\u005f",       "\u0061"-"\u007a",       "\u00c0"-"\u00d6",       "\u00d8"-"\u00f6",       "\u00f8"-"\u00ff",       "\u0100"-"\u1fff",       "\u3040"-"\u318f",       "\u3300"-"\u337f",       "\u3400"-"\u3d2d",       "\u4e00"-"\u9fff",       "\uf900"-"\ufaff"      ]  >|  < #DIGIT:      [       "\u0030"-"\u0039",       "\u0660"-"\u0669",       "\u06f0"-"\u06f9",       "\u0966"-"\u096f",       "\u09e6"-"\u09ef",       "\u0a66"-"\u0a6f",       "\u0ae6"-"\u0aef",       "\u0b66"-"\u0b6f",       "\u0be7"-"\u0bef",       "\u0c66"-"\u0c6f",       "\u0ce6"-"\u0cef",       "\u0d66"-"\u0d6f",       "\u0e50"-"\u0e59",       "\u0ed0"-"\u0ed9",       "\u1040"-"\u1049"      ]  >}                           // 定義文字/************************************ * The MiniJava Grammar Starts Here * ************************************/void Goal() :{}{  MainClass()  ( TypeDeclaration() )*  <EOF>}                           // 起始檔，宣告MainClass.void MainClass() :{}{  { System.out.println("");System.out.print("Main Class : ");}  "class" Identifier() "{"    "public" "static" "void" "main" "(" { System.out.print(" ~string[] ");}"String" "[" "]" Identifier() ")"       "{" ( LOOKAHEAD(2) VarDeclaration() )* ( { System.out.println("");System.out.print("statement -> ");}Statement())* "}"  "}"}                           // MainClass的統一規格void TypeDeclaration() :  {}{   LOOKAHEAD(3)  ClassDeclaration()|ClassExtendsDeclaration()}                           // 將 Class宣告分成有無 extends.void ClassDeclaration() :{}{  {  System.out.println("");System.out.print("Class :");}  "class" Identifier() "{" ( VarDeclaration() )*                            ( MethodDeclaration() )*                        "}"}void ClassExtendsDeclaration() :{}{  "class" Identifier()   { System.out.println("extends ");}"extends" Identifier()                       "{" ( VarDeclaration() )*                            ( MethodDeclaration() )*                        "}"}void VarDeclaration() :  {}{   { System.out.println("");System.out.print("VarDeclaration ->");}Type() Identifier() ";"      }                           // 變數宣告						   						   						   void MethodDeclaration() :  {}{  { System.out.println("");System.out.print("MethodDeclaration: ");}"public" Type() Identifier()   "(" { System.out.print("(");}( FormalParameterList() )? ")" { System.out.print(")");}    "{" ( LOOKAHEAD(2) VarDeclaration() )*       ( { System.out.println("");System.out.print("statement -> ");}Statement() )* "return" { System.out.println("");System.out.print("Exp ->");}Expression() ";" "}"}                           // 函數宣告，有開頭函數名稱、所需的io變數void FormalParameterList() :{}{  FormalParameter() ( FormalParameterRest() )*}                           // 若變數有很多個，要重複拆解void FormalParameter() :{}{  Type() Identifier()}                           // 一個單位的變數						   void FormalParameterRest() :{}{  "," { System.out.print(" , ");}FormalParameter()}                           // 其他變數，會用『，』連接void Type() :{}{  LOOKAHEAD(3)  ArrayType()|BooleanType()|IntegerType()|Identifier()     }                           // 我將Type分成4類：Array,boolean,integer,自訂義 void ArrayType() :{}{  {System.out.print("int [] ");}  "int" "[" "]"  }void BooleanType() :{}{   {System.out.print("boolean ");}  "boolean"}void IntegerType() :{}{   {System.out.print("int ");}  "int"}void Statement() :{}{    Block()|   LOOKAHEAD(2)  { System.out.println("");System.out.print("AssignmentStatement -> ");}AssignmentStatement()|  LOOKAHEAD(2)  { System.out.println("");System.out.print("ArrayAssignmentStatement -> ");}ArrayAssignmentStatement()|  { System.out.println("");System.out.print("IFStatement -> ");}IfStatement()|  { System.out.println("");System.out.print("WhileStatement -> ");}WhileStatement()|  { System.out.println("");System.out.print("PrintStatement -> ");}PrintStatement()  }                           // 分成 多重括號、寫入變數、寫入矩陣變數、If條件、While條件、System_Print_outvoid Block() :{}{  "{" ( { System.out.println("");System.out.print("statement -> ");}Statement() )* "}"}                           //允許多重括號						   void AssignmentStatement() :{}{  Identifier() "=" { System.out.println("");System.out.print("Exp ->");}Expression() ";"}void ArrayAssignmentStatement() :{}{  Identifier() "[" { System.out.println("");System.out.print("Exp ->");}Expression() "]" "=" { System.out.println("");System.out.print("Exp ->");}Expression() ";"}void IfStatement() :{}{  "if" "(" { System.out.println("");System.out.print("Exp ->");}Expression() ")" { System.out.println("");System.out.print("statement -> ");}Statement() { System.out.println("");System.out.print("statement -> ");}{ System.out.println("");System.out.print("Else -> ");}"else" { System.out.println("");System.out.print("statement -> ");}Statement() }void WhileStatement() :{}{  "while" "(" { System.out.println("");System.out.print("Exp ->");}Expression() ")" { System.out.println("");System.out.print("statement -> ");}Statement() }void PrintStatement() :{}{  { System.out.print("System.out.println( exp );");}  "System.out.println" "(" { System.out.println("");System.out.print("Exp ->");}Expression() ")" ";"}void Expression() :{}{    LOOKAHEAD( PrimaryExpression() "&&" )  AndExpression()|  LOOKAHEAD( PrimaryExpression() "<" )  CompareExpression()|  LOOKAHEAD( PrimaryExpression() "+" )  PlusExpression()|  LOOKAHEAD( PrimaryExpression() "-" )  MinusExpression()|  LOOKAHEAD( PrimaryExpression() "*" )  TimesExpression()|  LOOKAHEAD( PrimaryExpression() "[" )  ArrayLookup()|  LOOKAHEAD( PrimaryExpression() "." "length" )  ArrayLength()|  LOOKAHEAD( PrimaryExpression() "." Identifier() "(" )  MessageSend()|   PrimaryExpression()                             //各項operater、矩陣內位置、矩陣大小、函數內呼叫}void AndExpression() :{} {  PrimaryExpression() "&&" PrimaryExpression()}void CompareExpression() :{} {  PrimaryExpression() "<" PrimaryExpression()}void PlusExpression() :{}{  PrimaryExpression() "+" PrimaryExpression()}void MinusExpression() :{}{  PrimaryExpression() "-" PrimaryExpression()}void TimesExpression() :{}{  PrimaryExpression() "*" PrimaryExpression()}void ArrayLookup() :{}{  PrimaryExpression() "[" PrimaryExpression() "]"}void ArrayLength() :{}{  PrimaryExpression() "." "length"}void MessageSend() :{}{  PrimaryExpression() "." { System.out.print(".");}Identifier()   "(" ( { System.out.println("");System.out.print("ExpList ->");}ExpressionList() )? ")"}void ExpressionList() :{}{  {System.out.println("");System.out.print("Exp ->  ");}Expression() { System.out.println("");System.out.print("ExpRest ->");}( ExpressionRest() )*}                           //多項exp處理						   void ExpressionRest() :{}{  "," {System.out.println("");System.out.print("Exp ->  ");}Expression()}                           //其餘exp處理void PrimaryExpression() :{}{  IntegerLiteral()|  TrueLiteral()|  FalseLiteral()|  Identifier()|  ThisExpression()|  LOOKAHEAD(3)  ArrayAllocationExpression()|  AllocationExpression()|     NotExpression()|     BracketExpression()}                           //其他類型exp，通常是狀態輸出、變換，為結果狀態。void IntegerLiteral() :{Token t;}{  t=<INTEGER_LITERAL>  { System.out.println("");System.out.print("Exp ->  ");System.out.print(t.image);}}                           //數字void TrueLiteral() :{}{  "true"  { System.out.println("");System.out.print("Exp ->  ");System.out.print("true");}}                           //BOOLEANvoid FalseLiteral() :{}{  "false"  { System.out.println("");System.out.print("Exp ->  ");System.out.print("false");}}                           //BOOLEANvoid Identifier() :{Token t;}{  t=<IDENTIFIER>  { System.out.print(t.image);}}                           //自訂變數名稱void ThisExpression() :{}{  { System.out.print("this");}  "this"}                           //this						   void ArrayAllocationExpression() :{}{  { System.out.print("new int [ exp ] ");}  "new" "int" "[" {System.out.println("");System.out.print("Exp ->  ");}Expression() "]"}                           //新增arrayvoid AllocationExpression() :{}{  { System.out.print("new ");}  "new" Identifier() "(" ")"  { System.out.print("()");}}                           //新增變數void NotExpression() :{}{  { System.out.println("");System.out.println("NotExpression -> ");}  "!" {System.out.println("");System.out.print("Exp ->  ");}Expression() }                           //相反狀態						   void BracketExpression() :{}{  { System.out.println("");System.out.print("BracketExpression -> ");}  "(" {System.out.println("");System.out.print("Exp ->  ");}Expression() ")"}                           //去括號